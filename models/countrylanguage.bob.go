// Code generated by BobGen mysql v0.34.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"io"

	"github.com/aarondl/opt/omit"
	"github.com/shopspring/decimal"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/mysql"
	"github.com/stephenafamo/bob/dialect/mysql/dialect"
	"github.com/stephenafamo/bob/dialect/mysql/dm"
	"github.com/stephenafamo/bob/dialect/mysql/sm"
	"github.com/stephenafamo/bob/dialect/mysql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// Countrylanguage is an object representing the database table.
type Countrylanguage struct {
	CountryCode string                    `db:"CountryCode,pk" `
	Language    string                    `db:"Language,pk" `
	IsOfficial  CountrylanguageIsOfficial `db:"IsOfficial" `
	Percentage  decimal.Decimal           `db:"Percentage" `

	R countrylanguageR `db:"-" `
}

// CountrylanguageSlice is an alias for a slice of pointers to Countrylanguage.
// This should almost always be used instead of []*Countrylanguage.
type CountrylanguageSlice []*Countrylanguage

// Countrylanguages contains methods to work with the countrylanguage table
var Countrylanguages = mysql.NewTablex[*Countrylanguage, CountrylanguageSlice, *CountrylanguageSetter]("countrylanguage", []string{"CountryCode", "Language"})

// CountrylanguagesQuery is a query on the countrylanguage table
type CountrylanguagesQuery = *mysql.ViewQuery[*Countrylanguage, CountrylanguageSlice]

// countrylanguageR is where relationships are stored.
type countrylanguageR struct {
	CountryCodeCountry *Country // countryLanguage_ibfk_1
}

type countrylanguageColumnNames struct {
	CountryCode string
	Language    string
	IsOfficial  string
	Percentage  string
}

var CountrylanguageColumns = buildCountrylanguageColumns("countrylanguage")

type countrylanguageColumns struct {
	tableAlias  string
	CountryCode mysql.Expression
	Language    mysql.Expression
	IsOfficial  mysql.Expression
	Percentage  mysql.Expression
}

func (c countrylanguageColumns) Alias() string {
	return c.tableAlias
}

func (countrylanguageColumns) AliasedAs(alias string) countrylanguageColumns {
	return buildCountrylanguageColumns(alias)
}

func buildCountrylanguageColumns(alias string) countrylanguageColumns {
	return countrylanguageColumns{
		tableAlias:  alias,
		CountryCode: mysql.Quote(alias, "CountryCode"),
		Language:    mysql.Quote(alias, "Language"),
		IsOfficial:  mysql.Quote(alias, "IsOfficial"),
		Percentage:  mysql.Quote(alias, "Percentage"),
	}
}

type countrylanguageWhere[Q mysql.Filterable] struct {
	CountryCode mysql.WhereMod[Q, string]
	Language    mysql.WhereMod[Q, string]
	IsOfficial  mysql.WhereMod[Q, CountrylanguageIsOfficial]
	Percentage  mysql.WhereMod[Q, decimal.Decimal]
}

func (countrylanguageWhere[Q]) AliasedAs(alias string) countrylanguageWhere[Q] {
	return buildCountrylanguageWhere[Q](buildCountrylanguageColumns(alias))
}

func buildCountrylanguageWhere[Q mysql.Filterable](cols countrylanguageColumns) countrylanguageWhere[Q] {
	return countrylanguageWhere[Q]{
		CountryCode: mysql.Where[Q, string](cols.CountryCode),
		Language:    mysql.Where[Q, string](cols.Language),
		IsOfficial:  mysql.Where[Q, CountrylanguageIsOfficial](cols.IsOfficial),
		Percentage:  mysql.Where[Q, decimal.Decimal](cols.Percentage),
	}
}

var CountrylanguageErrors = &countrylanguageErrors{
	ErrUniquePrimary: &UniqueConstraintError{s: "PRIMARY"},
}

type countrylanguageErrors struct {
	ErrUniquePrimary *UniqueConstraintError
}

// CountrylanguageSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type CountrylanguageSetter struct {
	CountryCode omit.Val[string]                    `db:"CountryCode,pk" `
	Language    omit.Val[string]                    `db:"Language,pk" `
	IsOfficial  omit.Val[CountrylanguageIsOfficial] `db:"IsOfficial" `
	Percentage  omit.Val[decimal.Decimal]           `db:"Percentage" `
}

func (s CountrylanguageSetter) SetColumns() []string {
	vals := make([]string, 0, 4)
	if !s.CountryCode.IsUnset() {
		vals = append(vals, "CountryCode")
	}

	if !s.Language.IsUnset() {
		vals = append(vals, "Language")
	}

	if !s.IsOfficial.IsUnset() {
		vals = append(vals, "IsOfficial")
	}

	if !s.Percentage.IsUnset() {
		vals = append(vals, "Percentage")
	}

	return vals
}

func (s CountrylanguageSetter) Overwrite(t *Countrylanguage) {
	if !s.CountryCode.IsUnset() {
		t.CountryCode, _ = s.CountryCode.Get()
	}
	if !s.Language.IsUnset() {
		t.Language, _ = s.Language.Get()
	}
	if !s.IsOfficial.IsUnset() {
		t.IsOfficial, _ = s.IsOfficial.Get()
	}
	if !s.Percentage.IsUnset() {
		t.Percentage, _ = s.Percentage.Get()
	}
}

func (s *CountrylanguageSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Countrylanguages.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(
		bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if s.CountryCode.IsUnset() {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(s.CountryCode).WriteSQL(ctx, w, d, start)
		}), bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if s.Language.IsUnset() {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(s.Language).WriteSQL(ctx, w, d, start)
		}), bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if s.IsOfficial.IsUnset() {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(s.IsOfficial).WriteSQL(ctx, w, d, start)
		}), bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if s.Percentage.IsUnset() {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(s.Percentage).WriteSQL(ctx, w, d, start)
		}))
}

func (s CountrylanguageSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions("countrylanguage")...)
}

func (s CountrylanguageSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 4)

	if !s.CountryCode.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "CountryCode")...),
			mysql.Arg(s.CountryCode),
		}})
	}

	if !s.Language.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "Language")...),
			mysql.Arg(s.Language),
		}})
	}

	if !s.IsOfficial.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "IsOfficial")...),
			mysql.Arg(s.IsOfficial),
		}})
	}

	if !s.Percentage.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "Percentage")...),
			mysql.Arg(s.Percentage),
		}})
	}

	return exprs
}

// FindCountrylanguage retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindCountrylanguage(ctx context.Context, exec bob.Executor, CountryCodePK string, LanguagePK string, cols ...string) (*Countrylanguage, error) {
	if len(cols) == 0 {
		return Countrylanguages.Query(
			SelectWhere.Countrylanguages.CountryCode.EQ(CountryCodePK),
			SelectWhere.Countrylanguages.Language.EQ(LanguagePK),
		).One(ctx, exec)
	}

	return Countrylanguages.Query(
		SelectWhere.Countrylanguages.CountryCode.EQ(CountryCodePK),
		SelectWhere.Countrylanguages.Language.EQ(LanguagePK),
		sm.Columns(Countrylanguages.Columns().Only(cols...)),
	).One(ctx, exec)
}

// CountrylanguageExists checks the presence of a single record by primary key
func CountrylanguageExists(ctx context.Context, exec bob.Executor, CountryCodePK string, LanguagePK string) (bool, error) {
	return Countrylanguages.Query(
		SelectWhere.Countrylanguages.CountryCode.EQ(CountryCodePK),
		SelectWhere.Countrylanguages.Language.EQ(LanguagePK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after Countrylanguage is retrieved from the database
func (o *Countrylanguage) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Countrylanguages.AfterSelectHooks.RunHooks(ctx, exec, CountrylanguageSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Countrylanguages.AfterInsertHooks.RunHooks(ctx, exec, CountrylanguageSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Countrylanguages.AfterUpdateHooks.RunHooks(ctx, exec, CountrylanguageSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Countrylanguages.AfterDeleteHooks.RunHooks(ctx, exec, CountrylanguageSlice{o})
	}

	return err
}

// PrimaryKeyVals returns the primary key values of the Countrylanguage
func (o *Countrylanguage) PrimaryKeyVals() bob.Expression {
	return mysql.ArgGroup(
		o.CountryCode,
		o.Language,
	)
}

func (o *Countrylanguage) pkEQ() dialect.Expression {
	return mysql.Group(mysql.Quote("countrylanguage", "CountryCode"), mysql.Quote("countrylanguage", "Language")).EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.PrimaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the Countrylanguage
func (o *Countrylanguage) Update(ctx context.Context, exec bob.Executor, s *CountrylanguageSetter) error {
	_, err := Countrylanguages.Update(s.UpdateMod(), um.Where(o.pkEQ())).Exec(ctx, exec)
	if err != nil {
		return err
	}

	s.Overwrite(o)

	return nil
}

// Delete deletes a single Countrylanguage record with an executor
func (o *Countrylanguage) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Countrylanguages.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the Countrylanguage using the executor
func (o *Countrylanguage) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Countrylanguages.Query(
		SelectWhere.Countrylanguages.CountryCode.EQ(o.CountryCode),
		SelectWhere.Countrylanguages.Language.EQ(o.Language),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after CountrylanguageSlice is retrieved from the database
func (o CountrylanguageSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Countrylanguages.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Countrylanguages.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Countrylanguages.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Countrylanguages.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o CountrylanguageSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return mysql.Raw("NULL")
	}

	return mysql.Group(mysql.Quote("countrylanguage", "CountryCode"), mysql.Quote("countrylanguage", "Language")).In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.PrimaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o CountrylanguageSlice) copyMatchingRows(from ...*Countrylanguage) {
	for i, old := range o {
		for _, new := range from {
			if new.CountryCode != old.CountryCode {
				continue
			}
			if new.Language != old.Language {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o CountrylanguageSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Countrylanguages.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Countrylanguage:
				o.copyMatchingRows(retrieved)
			case []*Countrylanguage:
				o.copyMatchingRows(retrieved...)
			case CountrylanguageSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Countrylanguage or a slice of Countrylanguage
				// then run the AfterUpdateHooks on the slice
				_, err = Countrylanguages.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o CountrylanguageSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Countrylanguages.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Countrylanguage:
				o.copyMatchingRows(retrieved)
			case []*Countrylanguage:
				o.copyMatchingRows(retrieved...)
			case CountrylanguageSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Countrylanguage or a slice of Countrylanguage
				// then run the AfterDeleteHooks on the slice
				_, err = Countrylanguages.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o CountrylanguageSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals CountrylanguageSetter) error {
	_, err := Countrylanguages.Update(vals.UpdateMod(), o.UpdateMod()).Exec(ctx, exec)

	for i := range o {
		vals.Overwrite(o[i])
	}

	return err
}

func (o CountrylanguageSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Countrylanguages.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o CountrylanguageSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := Countrylanguages.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type countrylanguageJoins[Q dialect.Joinable] struct {
	typ                string
	CountryCodeCountry func(context.Context) modAs[Q, countryColumns]
}

func (j countrylanguageJoins[Q]) aliasedAs(alias string) countrylanguageJoins[Q] {
	return buildCountrylanguageJoins[Q](buildCountrylanguageColumns(alias), j.typ)
}

func buildCountrylanguageJoins[Q dialect.Joinable](cols countrylanguageColumns, typ string) countrylanguageJoins[Q] {
	return countrylanguageJoins[Q]{
		typ:                typ,
		CountryCodeCountry: countrylanguagesJoinCountryCodeCountry[Q](cols, typ),
	}
}

func countrylanguagesJoinCountryCodeCountry[Q dialect.Joinable](from countrylanguageColumns, typ string) func(context.Context) modAs[Q, countryColumns] {
	return func(ctx context.Context) modAs[Q, countryColumns] {
		return modAs[Q, countryColumns]{
			c: CountryColumns,
			f: func(to countryColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Countries.Name().As(to.Alias())).On(
						to.Code.EQ(from.CountryCode),
					))
				}

				return mods
			},
		}
	}
}

// CountryCodeCountry starts a query for related objects on country
func (o *Countrylanguage) CountryCodeCountry(mods ...bob.Mod[*dialect.SelectQuery]) CountriesQuery {
	return Countries.Query(append(mods,
		sm.Where(CountryColumns.Code.EQ(mysql.Arg(o.CountryCode))),
	)...)
}

func (os CountrylanguageSlice) CountryCodeCountry(mods ...bob.Mod[*dialect.SelectQuery]) CountriesQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = mysql.ArgGroup(o.CountryCode)
	}

	return Countries.Query(append(mods,
		sm.Where(mysql.Group(CountryColumns.Code).In(PKArgs...)),
	)...)
}

func (o *Countrylanguage) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "CountryCodeCountry":
		rel, ok := retrieved.(*Country)
		if !ok {
			return fmt.Errorf("countrylanguage cannot load %T as %q", retrieved, name)
		}

		o.R.CountryCodeCountry = rel

		if rel != nil {
			rel.R.CountryCodeCountrylanguages = CountrylanguageSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("countrylanguage has no relationship %q", name)
	}
}

func PreloadCountrylanguageCountryCodeCountry(opts ...mysql.PreloadOption) mysql.Preloader {
	return mysql.Preload[*Country, CountrySlice](orm.Relationship{
		Name: "CountryCodeCountry",
		Sides: []orm.RelSide{
			{
				From: TableNames.Countrylanguages,
				To:   TableNames.Countries,
				FromColumns: []string{
					ColumnNames.Countrylanguages.CountryCode,
				},
				ToColumns: []string{
					ColumnNames.Countries.Code,
				},
			},
		},
	}, Countries.Columns().Names(), opts...)
}

func ThenLoadCountrylanguageCountryCodeCountry(queryMods ...bob.Mod[*dialect.SelectQuery]) mysql.Loader {
	return mysql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadCountrylanguageCountryCodeCountry(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load CountrylanguageCountryCodeCountry", retrieved)
		}

		err := loader.LoadCountrylanguageCountryCodeCountry(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadCountrylanguageCountryCodeCountry loads the countrylanguage's CountryCodeCountry into the .R struct
func (o *Countrylanguage) LoadCountrylanguageCountryCodeCountry(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.CountryCodeCountry = nil

	related, err := o.CountryCodeCountry(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.CountryCodeCountrylanguages = CountrylanguageSlice{o}

	o.R.CountryCodeCountry = related
	return nil
}

// LoadCountrylanguageCountryCodeCountry loads the countrylanguage's CountryCodeCountry into the .R struct
func (os CountrylanguageSlice) LoadCountrylanguageCountryCodeCountry(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	countries, err := os.CountryCodeCountry(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range countries {
			if o.CountryCode != rel.Code {
				continue
			}

			rel.R.CountryCodeCountrylanguages = append(rel.R.CountryCodeCountrylanguages, o)

			o.R.CountryCodeCountry = rel
			break
		}
	}

	return nil
}

func attachCountrylanguageCountryCodeCountry0(ctx context.Context, exec bob.Executor, count int, countrylanguage0 *Countrylanguage, country1 *Country) (*Countrylanguage, error) {
	setter := &CountrylanguageSetter{
		CountryCode: omit.From(country1.Code),
	}

	err := countrylanguage0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachCountrylanguageCountryCodeCountry0: %w", err)
	}

	return countrylanguage0, nil
}

func (countrylanguage0 *Countrylanguage) InsertCountryCodeCountry(ctx context.Context, exec bob.Executor, related *CountrySetter) error {
	country1, err := Countries.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachCountrylanguageCountryCodeCountry0(ctx, exec, 1, countrylanguage0, country1)
	if err != nil {
		return err
	}

	countrylanguage0.R.CountryCodeCountry = country1

	country1.R.CountryCodeCountrylanguages = append(country1.R.CountryCodeCountrylanguages, countrylanguage0)

	return nil
}

func (countrylanguage0 *Countrylanguage) AttachCountryCodeCountry(ctx context.Context, exec bob.Executor, country1 *Country) error {
	var err error

	_, err = attachCountrylanguageCountryCodeCountry0(ctx, exec, 1, countrylanguage0, country1)
	if err != nil {
		return err
	}

	countrylanguage0.R.CountryCodeCountry = country1

	country1.R.CountryCodeCountrylanguages = append(country1.R.CountryCodeCountrylanguages, countrylanguage0)

	return nil
}
