// Code generated by BobGen mysql v0.34.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"io"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/shopspring/decimal"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/mysql"
	"github.com/stephenafamo/bob/dialect/mysql/dialect"
	"github.com/stephenafamo/bob/dialect/mysql/dm"
	"github.com/stephenafamo/bob/dialect/mysql/sm"
	"github.com/stephenafamo/bob/dialect/mysql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
)

// Country is an object representing the database table.
type Country struct {
	Code           string                    `db:"Code,pk" `
	Name           string                    `db:"Name" `
	Continent      CountryContinent          `db:"Continent" `
	Region         string                    `db:"Region" `
	SurfaceArea    decimal.Decimal           `db:"SurfaceArea" `
	IndepYear      null.Val[int16]           `db:"IndepYear" `
	Population     int32                     `db:"Population" `
	LifeExpectancy null.Val[decimal.Decimal] `db:"LifeExpectancy" `
	GNP            null.Val[decimal.Decimal] `db:"GNP" `
	GNPOLD         null.Val[decimal.Decimal] `db:"GNPOld" `
	LocalName      string                    `db:"LocalName" `
	GovernmentForm string                    `db:"GovernmentForm" `
	HeadOfState    null.Val[string]          `db:"HeadOfState" `
	Capital        null.Val[int32]           `db:"Capital" `
	Code2          string                    `db:"Code2" `

	R countryR `db:"-" `
}

// CountrySlice is an alias for a slice of pointers to Country.
// This should almost always be used instead of []*Country.
type CountrySlice []*Country

// Countries contains methods to work with the country table
var Countries = mysql.NewTablex[*Country, CountrySlice, *CountrySetter]("country", []string{"Code"})

// CountriesQuery is a query on the country table
type CountriesQuery = *mysql.ViewQuery[*Country, CountrySlice]

// countryR is where relationships are stored.
type countryR struct {
	CountryCodeCities           CitySlice            // city_ibfk_1
	CountryCodeCountrylanguages CountrylanguageSlice // countryLanguage_ibfk_1
}

type countryColumnNames struct {
	Code           string
	Name           string
	Continent      string
	Region         string
	SurfaceArea    string
	IndepYear      string
	Population     string
	LifeExpectancy string
	GNP            string
	GNPOLD         string
	LocalName      string
	GovernmentForm string
	HeadOfState    string
	Capital        string
	Code2          string
}

var CountryColumns = buildCountryColumns("country")

type countryColumns struct {
	tableAlias     string
	Code           mysql.Expression
	Name           mysql.Expression
	Continent      mysql.Expression
	Region         mysql.Expression
	SurfaceArea    mysql.Expression
	IndepYear      mysql.Expression
	Population     mysql.Expression
	LifeExpectancy mysql.Expression
	GNP            mysql.Expression
	GNPOLD         mysql.Expression
	LocalName      mysql.Expression
	GovernmentForm mysql.Expression
	HeadOfState    mysql.Expression
	Capital        mysql.Expression
	Code2          mysql.Expression
}

func (c countryColumns) Alias() string {
	return c.tableAlias
}

func (countryColumns) AliasedAs(alias string) countryColumns {
	return buildCountryColumns(alias)
}

func buildCountryColumns(alias string) countryColumns {
	return countryColumns{
		tableAlias:     alias,
		Code:           mysql.Quote(alias, "Code"),
		Name:           mysql.Quote(alias, "Name"),
		Continent:      mysql.Quote(alias, "Continent"),
		Region:         mysql.Quote(alias, "Region"),
		SurfaceArea:    mysql.Quote(alias, "SurfaceArea"),
		IndepYear:      mysql.Quote(alias, "IndepYear"),
		Population:     mysql.Quote(alias, "Population"),
		LifeExpectancy: mysql.Quote(alias, "LifeExpectancy"),
		GNP:            mysql.Quote(alias, "GNP"),
		GNPOLD:         mysql.Quote(alias, "GNPOld"),
		LocalName:      mysql.Quote(alias, "LocalName"),
		GovernmentForm: mysql.Quote(alias, "GovernmentForm"),
		HeadOfState:    mysql.Quote(alias, "HeadOfState"),
		Capital:        mysql.Quote(alias, "Capital"),
		Code2:          mysql.Quote(alias, "Code2"),
	}
}

type countryWhere[Q mysql.Filterable] struct {
	Code           mysql.WhereMod[Q, string]
	Name           mysql.WhereMod[Q, string]
	Continent      mysql.WhereMod[Q, CountryContinent]
	Region         mysql.WhereMod[Q, string]
	SurfaceArea    mysql.WhereMod[Q, decimal.Decimal]
	IndepYear      mysql.WhereNullMod[Q, int16]
	Population     mysql.WhereMod[Q, int32]
	LifeExpectancy mysql.WhereNullMod[Q, decimal.Decimal]
	GNP            mysql.WhereNullMod[Q, decimal.Decimal]
	GNPOLD         mysql.WhereNullMod[Q, decimal.Decimal]
	LocalName      mysql.WhereMod[Q, string]
	GovernmentForm mysql.WhereMod[Q, string]
	HeadOfState    mysql.WhereNullMod[Q, string]
	Capital        mysql.WhereNullMod[Q, int32]
	Code2          mysql.WhereMod[Q, string]
}

func (countryWhere[Q]) AliasedAs(alias string) countryWhere[Q] {
	return buildCountryWhere[Q](buildCountryColumns(alias))
}

func buildCountryWhere[Q mysql.Filterable](cols countryColumns) countryWhere[Q] {
	return countryWhere[Q]{
		Code:           mysql.Where[Q, string](cols.Code),
		Name:           mysql.Where[Q, string](cols.Name),
		Continent:      mysql.Where[Q, CountryContinent](cols.Continent),
		Region:         mysql.Where[Q, string](cols.Region),
		SurfaceArea:    mysql.Where[Q, decimal.Decimal](cols.SurfaceArea),
		IndepYear:      mysql.WhereNull[Q, int16](cols.IndepYear),
		Population:     mysql.Where[Q, int32](cols.Population),
		LifeExpectancy: mysql.WhereNull[Q, decimal.Decimal](cols.LifeExpectancy),
		GNP:            mysql.WhereNull[Q, decimal.Decimal](cols.GNP),
		GNPOLD:         mysql.WhereNull[Q, decimal.Decimal](cols.GNPOLD),
		LocalName:      mysql.Where[Q, string](cols.LocalName),
		GovernmentForm: mysql.Where[Q, string](cols.GovernmentForm),
		HeadOfState:    mysql.WhereNull[Q, string](cols.HeadOfState),
		Capital:        mysql.WhereNull[Q, int32](cols.Capital),
		Code2:          mysql.Where[Q, string](cols.Code2),
	}
}

var CountryErrors = &countryErrors{
	ErrUniquePrimary: &UniqueConstraintError{s: "PRIMARY"},
}

type countryErrors struct {
	ErrUniquePrimary *UniqueConstraintError
}

// CountrySetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type CountrySetter struct {
	Code           omit.Val[string]              `db:"Code,pk" `
	Name           omit.Val[string]              `db:"Name" `
	Continent      omit.Val[CountryContinent]    `db:"Continent" `
	Region         omit.Val[string]              `db:"Region" `
	SurfaceArea    omit.Val[decimal.Decimal]     `db:"SurfaceArea" `
	IndepYear      omitnull.Val[int16]           `db:"IndepYear" `
	Population     omit.Val[int32]               `db:"Population" `
	LifeExpectancy omitnull.Val[decimal.Decimal] `db:"LifeExpectancy" `
	GNP            omitnull.Val[decimal.Decimal] `db:"GNP" `
	GNPOLD         omitnull.Val[decimal.Decimal] `db:"GNPOld" `
	LocalName      omit.Val[string]              `db:"LocalName" `
	GovernmentForm omit.Val[string]              `db:"GovernmentForm" `
	HeadOfState    omitnull.Val[string]          `db:"HeadOfState" `
	Capital        omitnull.Val[int32]           `db:"Capital" `
	Code2          omit.Val[string]              `db:"Code2" `
}

func (s CountrySetter) SetColumns() []string {
	vals := make([]string, 0, 15)
	if !s.Code.IsUnset() {
		vals = append(vals, "Code")
	}

	if !s.Name.IsUnset() {
		vals = append(vals, "Name")
	}

	if !s.Continent.IsUnset() {
		vals = append(vals, "Continent")
	}

	if !s.Region.IsUnset() {
		vals = append(vals, "Region")
	}

	if !s.SurfaceArea.IsUnset() {
		vals = append(vals, "SurfaceArea")
	}

	if !s.IndepYear.IsUnset() {
		vals = append(vals, "IndepYear")
	}

	if !s.Population.IsUnset() {
		vals = append(vals, "Population")
	}

	if !s.LifeExpectancy.IsUnset() {
		vals = append(vals, "LifeExpectancy")
	}

	if !s.GNP.IsUnset() {
		vals = append(vals, "GNP")
	}

	if !s.GNPOLD.IsUnset() {
		vals = append(vals, "GNPOld")
	}

	if !s.LocalName.IsUnset() {
		vals = append(vals, "LocalName")
	}

	if !s.GovernmentForm.IsUnset() {
		vals = append(vals, "GovernmentForm")
	}

	if !s.HeadOfState.IsUnset() {
		vals = append(vals, "HeadOfState")
	}

	if !s.Capital.IsUnset() {
		vals = append(vals, "Capital")
	}

	if !s.Code2.IsUnset() {
		vals = append(vals, "Code2")
	}

	return vals
}

func (s CountrySetter) Overwrite(t *Country) {
	if !s.Code.IsUnset() {
		t.Code, _ = s.Code.Get()
	}
	if !s.Name.IsUnset() {
		t.Name, _ = s.Name.Get()
	}
	if !s.Continent.IsUnset() {
		t.Continent, _ = s.Continent.Get()
	}
	if !s.Region.IsUnset() {
		t.Region, _ = s.Region.Get()
	}
	if !s.SurfaceArea.IsUnset() {
		t.SurfaceArea, _ = s.SurfaceArea.Get()
	}
	if !s.IndepYear.IsUnset() {
		t.IndepYear, _ = s.IndepYear.GetNull()
	}
	if !s.Population.IsUnset() {
		t.Population, _ = s.Population.Get()
	}
	if !s.LifeExpectancy.IsUnset() {
		t.LifeExpectancy, _ = s.LifeExpectancy.GetNull()
	}
	if !s.GNP.IsUnset() {
		t.GNP, _ = s.GNP.GetNull()
	}
	if !s.GNPOLD.IsUnset() {
		t.GNPOLD, _ = s.GNPOLD.GetNull()
	}
	if !s.LocalName.IsUnset() {
		t.LocalName, _ = s.LocalName.Get()
	}
	if !s.GovernmentForm.IsUnset() {
		t.GovernmentForm, _ = s.GovernmentForm.Get()
	}
	if !s.HeadOfState.IsUnset() {
		t.HeadOfState, _ = s.HeadOfState.GetNull()
	}
	if !s.Capital.IsUnset() {
		t.Capital, _ = s.Capital.GetNull()
	}
	if !s.Code2.IsUnset() {
		t.Code2, _ = s.Code2.Get()
	}
}

func (s *CountrySetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Countries.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(
		bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if s.Code.IsUnset() {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(s.Code).WriteSQL(ctx, w, d, start)
		}), bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if s.Name.IsUnset() {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(s.Name).WriteSQL(ctx, w, d, start)
		}), bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if s.Continent.IsUnset() {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(s.Continent).WriteSQL(ctx, w, d, start)
		}), bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if s.Region.IsUnset() {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(s.Region).WriteSQL(ctx, w, d, start)
		}), bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if s.SurfaceArea.IsUnset() {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(s.SurfaceArea).WriteSQL(ctx, w, d, start)
		}), bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if s.IndepYear.IsUnset() {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(s.IndepYear).WriteSQL(ctx, w, d, start)
		}), bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if s.Population.IsUnset() {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(s.Population).WriteSQL(ctx, w, d, start)
		}), bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if s.LifeExpectancy.IsUnset() {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(s.LifeExpectancy).WriteSQL(ctx, w, d, start)
		}), bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if s.GNP.IsUnset() {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(s.GNP).WriteSQL(ctx, w, d, start)
		}), bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if s.GNPOLD.IsUnset() {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(s.GNPOLD).WriteSQL(ctx, w, d, start)
		}), bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if s.LocalName.IsUnset() {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(s.LocalName).WriteSQL(ctx, w, d, start)
		}), bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if s.GovernmentForm.IsUnset() {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(s.GovernmentForm).WriteSQL(ctx, w, d, start)
		}), bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if s.HeadOfState.IsUnset() {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(s.HeadOfState).WriteSQL(ctx, w, d, start)
		}), bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if s.Capital.IsUnset() {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(s.Capital).WriteSQL(ctx, w, d, start)
		}), bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if s.Code2.IsUnset() {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(s.Code2).WriteSQL(ctx, w, d, start)
		}))
}

func (s CountrySetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions("country")...)
}

func (s CountrySetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 15)

	if !s.Code.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "Code")...),
			mysql.Arg(s.Code),
		}})
	}

	if !s.Name.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "Name")...),
			mysql.Arg(s.Name),
		}})
	}

	if !s.Continent.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "Continent")...),
			mysql.Arg(s.Continent),
		}})
	}

	if !s.Region.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "Region")...),
			mysql.Arg(s.Region),
		}})
	}

	if !s.SurfaceArea.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "SurfaceArea")...),
			mysql.Arg(s.SurfaceArea),
		}})
	}

	if !s.IndepYear.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "IndepYear")...),
			mysql.Arg(s.IndepYear),
		}})
	}

	if !s.Population.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "Population")...),
			mysql.Arg(s.Population),
		}})
	}

	if !s.LifeExpectancy.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "LifeExpectancy")...),
			mysql.Arg(s.LifeExpectancy),
		}})
	}

	if !s.GNP.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "GNP")...),
			mysql.Arg(s.GNP),
		}})
	}

	if !s.GNPOLD.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "GNPOld")...),
			mysql.Arg(s.GNPOLD),
		}})
	}

	if !s.LocalName.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "LocalName")...),
			mysql.Arg(s.LocalName),
		}})
	}

	if !s.GovernmentForm.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "GovernmentForm")...),
			mysql.Arg(s.GovernmentForm),
		}})
	}

	if !s.HeadOfState.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "HeadOfState")...),
			mysql.Arg(s.HeadOfState),
		}})
	}

	if !s.Capital.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "Capital")...),
			mysql.Arg(s.Capital),
		}})
	}

	if !s.Code2.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "Code2")...),
			mysql.Arg(s.Code2),
		}})
	}

	return exprs
}

// FindCountry retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindCountry(ctx context.Context, exec bob.Executor, CodePK string, cols ...string) (*Country, error) {
	if len(cols) == 0 {
		return Countries.Query(
			SelectWhere.Countries.Code.EQ(CodePK),
		).One(ctx, exec)
	}

	return Countries.Query(
		SelectWhere.Countries.Code.EQ(CodePK),
		sm.Columns(Countries.Columns().Only(cols...)),
	).One(ctx, exec)
}

// CountryExists checks the presence of a single record by primary key
func CountryExists(ctx context.Context, exec bob.Executor, CodePK string) (bool, error) {
	return Countries.Query(
		SelectWhere.Countries.Code.EQ(CodePK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after Country is retrieved from the database
func (o *Country) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Countries.AfterSelectHooks.RunHooks(ctx, exec, CountrySlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Countries.AfterInsertHooks.RunHooks(ctx, exec, CountrySlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Countries.AfterUpdateHooks.RunHooks(ctx, exec, CountrySlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Countries.AfterDeleteHooks.RunHooks(ctx, exec, CountrySlice{o})
	}

	return err
}

// PrimaryKeyVals returns the primary key values of the Country
func (o *Country) PrimaryKeyVals() bob.Expression {
	return mysql.Arg(o.Code)
}

func (o *Country) pkEQ() dialect.Expression {
	return mysql.Quote("country", "Code").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.PrimaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the Country
func (o *Country) Update(ctx context.Context, exec bob.Executor, s *CountrySetter) error {
	_, err := Countries.Update(s.UpdateMod(), um.Where(o.pkEQ())).Exec(ctx, exec)
	if err != nil {
		return err
	}

	s.Overwrite(o)

	return nil
}

// Delete deletes a single Country record with an executor
func (o *Country) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Countries.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the Country using the executor
func (o *Country) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Countries.Query(
		SelectWhere.Countries.Code.EQ(o.Code),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after CountrySlice is retrieved from the database
func (o CountrySlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Countries.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Countries.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Countries.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Countries.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o CountrySlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return mysql.Raw("NULL")
	}

	return mysql.Quote("country", "Code").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.PrimaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o CountrySlice) copyMatchingRows(from ...*Country) {
	for i, old := range o {
		for _, new := range from {
			if new.Code != old.Code {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o CountrySlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Countries.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Country:
				o.copyMatchingRows(retrieved)
			case []*Country:
				o.copyMatchingRows(retrieved...)
			case CountrySlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Country or a slice of Country
				// then run the AfterUpdateHooks on the slice
				_, err = Countries.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o CountrySlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Countries.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Country:
				o.copyMatchingRows(retrieved)
			case []*Country:
				o.copyMatchingRows(retrieved...)
			case CountrySlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Country or a slice of Country
				// then run the AfterDeleteHooks on the slice
				_, err = Countries.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o CountrySlice) UpdateAll(ctx context.Context, exec bob.Executor, vals CountrySetter) error {
	_, err := Countries.Update(vals.UpdateMod(), o.UpdateMod()).Exec(ctx, exec)

	for i := range o {
		vals.Overwrite(o[i])
	}

	return err
}

func (o CountrySlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Countries.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o CountrySlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := Countries.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type countryJoins[Q dialect.Joinable] struct {
	typ                         string
	CountryCodeCities           func(context.Context) modAs[Q, cityColumns]
	CountryCodeCountrylanguages func(context.Context) modAs[Q, countrylanguageColumns]
}

func (j countryJoins[Q]) aliasedAs(alias string) countryJoins[Q] {
	return buildCountryJoins[Q](buildCountryColumns(alias), j.typ)
}

func buildCountryJoins[Q dialect.Joinable](cols countryColumns, typ string) countryJoins[Q] {
	return countryJoins[Q]{
		typ:                         typ,
		CountryCodeCities:           countriesJoinCountryCodeCities[Q](cols, typ),
		CountryCodeCountrylanguages: countriesJoinCountryCodeCountrylanguages[Q](cols, typ),
	}
}

func countriesJoinCountryCodeCities[Q dialect.Joinable](from countryColumns, typ string) func(context.Context) modAs[Q, cityColumns] {
	return func(ctx context.Context) modAs[Q, cityColumns] {
		return modAs[Q, cityColumns]{
			c: CityColumns,
			f: func(to cityColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Cities.Name().As(to.Alias())).On(
						to.CountryCode.EQ(from.Code),
					))
				}

				return mods
			},
		}
	}
}

func countriesJoinCountryCodeCountrylanguages[Q dialect.Joinable](from countryColumns, typ string) func(context.Context) modAs[Q, countrylanguageColumns] {
	return func(ctx context.Context) modAs[Q, countrylanguageColumns] {
		return modAs[Q, countrylanguageColumns]{
			c: CountrylanguageColumns,
			f: func(to countrylanguageColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Countrylanguages.Name().As(to.Alias())).On(
						to.CountryCode.EQ(from.Code),
					))
				}

				return mods
			},
		}
	}
}

// CountryCodeCities starts a query for related objects on city
func (o *Country) CountryCodeCities(mods ...bob.Mod[*dialect.SelectQuery]) CitiesQuery {
	return Cities.Query(append(mods,
		sm.Where(CityColumns.CountryCode.EQ(mysql.Arg(o.Code))),
	)...)
}

func (os CountrySlice) CountryCodeCities(mods ...bob.Mod[*dialect.SelectQuery]) CitiesQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = mysql.ArgGroup(o.Code)
	}

	return Cities.Query(append(mods,
		sm.Where(mysql.Group(CityColumns.CountryCode).In(PKArgs...)),
	)...)
}

// CountryCodeCountrylanguages starts a query for related objects on countrylanguage
func (o *Country) CountryCodeCountrylanguages(mods ...bob.Mod[*dialect.SelectQuery]) CountrylanguagesQuery {
	return Countrylanguages.Query(append(mods,
		sm.Where(CountrylanguageColumns.CountryCode.EQ(mysql.Arg(o.Code))),
	)...)
}

func (os CountrySlice) CountryCodeCountrylanguages(mods ...bob.Mod[*dialect.SelectQuery]) CountrylanguagesQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = mysql.ArgGroup(o.Code)
	}

	return Countrylanguages.Query(append(mods,
		sm.Where(mysql.Group(CountrylanguageColumns.CountryCode).In(PKArgs...)),
	)...)
}

func (o *Country) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "CountryCodeCities":
		rels, ok := retrieved.(CitySlice)
		if !ok {
			return fmt.Errorf("country cannot load %T as %q", retrieved, name)
		}

		o.R.CountryCodeCities = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.CountryCodeCountry = o
			}
		}
		return nil
	case "CountryCodeCountrylanguages":
		rels, ok := retrieved.(CountrylanguageSlice)
		if !ok {
			return fmt.Errorf("country cannot load %T as %q", retrieved, name)
		}

		o.R.CountryCodeCountrylanguages = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.CountryCodeCountry = o
			}
		}
		return nil
	default:
		return fmt.Errorf("country has no relationship %q", name)
	}
}

func ThenLoadCountryCountryCodeCities(queryMods ...bob.Mod[*dialect.SelectQuery]) mysql.Loader {
	return mysql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadCountryCountryCodeCities(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load CountryCountryCodeCities", retrieved)
		}

		err := loader.LoadCountryCountryCodeCities(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadCountryCountryCodeCities loads the country's CountryCodeCities into the .R struct
func (o *Country) LoadCountryCountryCodeCities(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.CountryCodeCities = nil

	related, err := o.CountryCodeCities(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.CountryCodeCountry = o
	}

	o.R.CountryCodeCities = related
	return nil
}

// LoadCountryCountryCodeCities loads the country's CountryCodeCities into the .R struct
func (os CountrySlice) LoadCountryCountryCodeCities(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	cities, err := os.CountryCodeCities(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.CountryCodeCities = nil
	}

	for _, o := range os {
		for _, rel := range cities {
			if o.Code != rel.CountryCode {
				continue
			}

			rel.R.CountryCodeCountry = o

			o.R.CountryCodeCities = append(o.R.CountryCodeCities, rel)
		}
	}

	return nil
}

func ThenLoadCountryCountryCodeCountrylanguages(queryMods ...bob.Mod[*dialect.SelectQuery]) mysql.Loader {
	return mysql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadCountryCountryCodeCountrylanguages(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load CountryCountryCodeCountrylanguages", retrieved)
		}

		err := loader.LoadCountryCountryCodeCountrylanguages(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadCountryCountryCodeCountrylanguages loads the country's CountryCodeCountrylanguages into the .R struct
func (o *Country) LoadCountryCountryCodeCountrylanguages(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.CountryCodeCountrylanguages = nil

	related, err := o.CountryCodeCountrylanguages(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.CountryCodeCountry = o
	}

	o.R.CountryCodeCountrylanguages = related
	return nil
}

// LoadCountryCountryCodeCountrylanguages loads the country's CountryCodeCountrylanguages into the .R struct
func (os CountrySlice) LoadCountryCountryCodeCountrylanguages(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	countrylanguages, err := os.CountryCodeCountrylanguages(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.CountryCodeCountrylanguages = nil
	}

	for _, o := range os {
		for _, rel := range countrylanguages {
			if o.Code != rel.CountryCode {
				continue
			}

			rel.R.CountryCodeCountry = o

			o.R.CountryCodeCountrylanguages = append(o.R.CountryCodeCountrylanguages, rel)
		}
	}

	return nil
}

func insertCountryCountryCodeCities0(ctx context.Context, exec bob.Executor, cities1 []*CitySetter, country0 *Country) (CitySlice, error) {
	for i := range cities1 {
		cities1[i].CountryCode = omit.From(country0.Code)
	}

	ret, err := Cities.Insert(bob.ToMods(cities1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertCountryCountryCodeCities0: %w", err)
	}

	return ret, nil
}

func attachCountryCountryCodeCities0(ctx context.Context, exec bob.Executor, count int, cities1 CitySlice, country0 *Country) (CitySlice, error) {
	setter := &CitySetter{
		CountryCode: omit.From(country0.Code),
	}

	err := cities1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachCountryCountryCodeCities0: %w", err)
	}

	return cities1, nil
}

func (country0 *Country) InsertCountryCodeCities(ctx context.Context, exec bob.Executor, related ...*CitySetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	cities1, err := insertCountryCountryCodeCities0(ctx, exec, related, country0)
	if err != nil {
		return err
	}

	country0.R.CountryCodeCities = append(country0.R.CountryCodeCities, cities1...)

	for _, rel := range cities1 {
		rel.R.CountryCodeCountry = country0
	}
	return nil
}

func (country0 *Country) AttachCountryCodeCities(ctx context.Context, exec bob.Executor, related ...*City) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	cities1 := CitySlice(related)

	_, err = attachCountryCountryCodeCities0(ctx, exec, len(related), cities1, country0)
	if err != nil {
		return err
	}

	country0.R.CountryCodeCities = append(country0.R.CountryCodeCities, cities1...)

	for _, rel := range related {
		rel.R.CountryCodeCountry = country0
	}

	return nil
}

func insertCountryCountryCodeCountrylanguages0(ctx context.Context, exec bob.Executor, countrylanguages1 []*CountrylanguageSetter, country0 *Country) (CountrylanguageSlice, error) {
	for i := range countrylanguages1 {
		countrylanguages1[i].CountryCode = omit.From(country0.Code)
	}

	ret, err := Countrylanguages.Insert(bob.ToMods(countrylanguages1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertCountryCountryCodeCountrylanguages0: %w", err)
	}

	return ret, nil
}

func attachCountryCountryCodeCountrylanguages0(ctx context.Context, exec bob.Executor, count int, countrylanguages1 CountrylanguageSlice, country0 *Country) (CountrylanguageSlice, error) {
	setter := &CountrylanguageSetter{
		CountryCode: omit.From(country0.Code),
	}

	err := countrylanguages1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachCountryCountryCodeCountrylanguages0: %w", err)
	}

	return countrylanguages1, nil
}

func (country0 *Country) InsertCountryCodeCountrylanguages(ctx context.Context, exec bob.Executor, related ...*CountrylanguageSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	countrylanguages1, err := insertCountryCountryCodeCountrylanguages0(ctx, exec, related, country0)
	if err != nil {
		return err
	}

	country0.R.CountryCodeCountrylanguages = append(country0.R.CountryCodeCountrylanguages, countrylanguages1...)

	for _, rel := range countrylanguages1 {
		rel.R.CountryCodeCountry = country0
	}
	return nil
}

func (country0 *Country) AttachCountryCodeCountrylanguages(ctx context.Context, exec bob.Executor, related ...*Countrylanguage) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	countrylanguages1 := CountrylanguageSlice(related)

	_, err = attachCountryCountryCodeCountrylanguages0(ctx, exec, len(related), countrylanguages1, country0)
	if err != nil {
		return err
	}

	country0.R.CountryCodeCountrylanguages = append(country0.R.CountryCodeCountrylanguages, countrylanguages1...)

	for _, rel := range related {
		rel.R.CountryCodeCountry = country0
	}

	return nil
}
