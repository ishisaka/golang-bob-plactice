// Code generated by BobGen mysql v0.34.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql/driver"
	"fmt"
)

// Enum values for CountryContinent
const (
	CountryContinentAsia            CountryContinent = "Asia"
	CountryContinentEurope          CountryContinent = "Europe"
	CountryContinentNorthU20America CountryContinent = "North America"
	CountryContinentAfrica          CountryContinent = "Africa"
	CountryContinentOceania         CountryContinent = "Oceania"
	CountryContinentAntarctica      CountryContinent = "Antarctica"
	CountryContinentSouthU20America CountryContinent = "South America"
)

func AllCountryContinent() []CountryContinent {
	return []CountryContinent{
		CountryContinentAsia,
		CountryContinentEurope,
		CountryContinentNorthU20America,
		CountryContinentAfrica,
		CountryContinentOceania,
		CountryContinentAntarctica,
		CountryContinentSouthU20America,
	}
}

type CountryContinent string

func (e CountryContinent) String() string {
	return string(e)
}

func (e CountryContinent) Valid() bool {
	switch e {
	case CountryContinentAsia,
		CountryContinentEurope,
		CountryContinentNorthU20America,
		CountryContinentAfrica,
		CountryContinentOceania,
		CountryContinentAntarctica,
		CountryContinentSouthU20America:
		return true
	default:
		return false
	}
}

func (e CountryContinent) MarshalText() ([]byte, error) {
	return []byte(e), nil
}

func (e *CountryContinent) UnmarshalText(text []byte) error {
	return e.Scan(text)
}

func (e CountryContinent) MarshalBinary() ([]byte, error) {
	return []byte(e), nil
}

func (e *CountryContinent) UnmarshalBinary(data []byte) error {
	return e.Scan(data)
}

func (e CountryContinent) Value() (driver.Value, error) {
	return string(e), nil
}

func (e *CountryContinent) Scan(value any) error {
	switch x := value.(type) {
	case string:
		*e = CountryContinent(x)
	case []byte:
		*e = CountryContinent(x)
	case nil:
		return fmt.Errorf("cannot nil into CountryContinent")
	default:
		return fmt.Errorf("cannot scan type %T: %v", value, value)
	}

	if !e.Valid() {
		return fmt.Errorf("invalid CountryContinent value: %s", *e)
	}

	return nil
}

// Enum values for CountrylanguageIsOfficial
const (
	CountrylanguageIsOfficialT CountrylanguageIsOfficial = "T"
	CountrylanguageIsOfficialF CountrylanguageIsOfficial = "F"
)

func AllCountrylanguageIsOfficial() []CountrylanguageIsOfficial {
	return []CountrylanguageIsOfficial{
		CountrylanguageIsOfficialT,
		CountrylanguageIsOfficialF,
	}
}

type CountrylanguageIsOfficial string

func (e CountrylanguageIsOfficial) String() string {
	return string(e)
}

func (e CountrylanguageIsOfficial) Valid() bool {
	switch e {
	case CountrylanguageIsOfficialT,
		CountrylanguageIsOfficialF:
		return true
	default:
		return false
	}
}

func (e CountrylanguageIsOfficial) MarshalText() ([]byte, error) {
	return []byte(e), nil
}

func (e *CountrylanguageIsOfficial) UnmarshalText(text []byte) error {
	return e.Scan(text)
}

func (e CountrylanguageIsOfficial) MarshalBinary() ([]byte, error) {
	return []byte(e), nil
}

func (e *CountrylanguageIsOfficial) UnmarshalBinary(data []byte) error {
	return e.Scan(data)
}

func (e CountrylanguageIsOfficial) Value() (driver.Value, error) {
	return string(e), nil
}

func (e *CountrylanguageIsOfficial) Scan(value any) error {
	switch x := value.(type) {
	case string:
		*e = CountrylanguageIsOfficial(x)
	case []byte:
		*e = CountrylanguageIsOfficial(x)
	case nil:
		return fmt.Errorf("cannot nil into CountrylanguageIsOfficial")
	default:
		return fmt.Errorf("cannot scan type %T: %v", value, value)
	}

	if !e.Valid() {
		return fmt.Errorf("invalid CountrylanguageIsOfficial value: %s", *e)
	}

	return nil
}
