// Code generated by BobGen mysql v0.34.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"io"

	"github.com/aarondl/opt/omit"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/mysql"
	"github.com/stephenafamo/bob/dialect/mysql/dialect"
	"github.com/stephenafamo/bob/dialect/mysql/dm"
	"github.com/stephenafamo/bob/dialect/mysql/sm"
	"github.com/stephenafamo/bob/dialect/mysql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// City is an object representing the database table.
type City struct {
	ID          int32  `db:"ID,pk,autoincr" `
	Name        string `db:"Name" `
	CountryCode string `db:"CountryCode" `
	District    string `db:"District" `
	Population  int32  `db:"Population" `

	R cityR `db:"-" `
}

// CitySlice is an alias for a slice of pointers to City.
// This should almost always be used instead of []*City.
type CitySlice []*City

// Cities contains methods to work with the city table
var Cities = mysql.NewTablex[*City, CitySlice, *CitySetter]("city", []string{"ID"})

// CitiesQuery is a query on the city table
type CitiesQuery = *mysql.ViewQuery[*City, CitySlice]

// cityR is where relationships are stored.
type cityR struct {
	CountryCodeCountry *Country // city_ibfk_1
}

type cityColumnNames struct {
	ID          string
	Name        string
	CountryCode string
	District    string
	Population  string
}

var CityColumns = buildCityColumns("city")

type cityColumns struct {
	tableAlias  string
	ID          mysql.Expression
	Name        mysql.Expression
	CountryCode mysql.Expression
	District    mysql.Expression
	Population  mysql.Expression
}

func (c cityColumns) Alias() string {
	return c.tableAlias
}

func (cityColumns) AliasedAs(alias string) cityColumns {
	return buildCityColumns(alias)
}

func buildCityColumns(alias string) cityColumns {
	return cityColumns{
		tableAlias:  alias,
		ID:          mysql.Quote(alias, "ID"),
		Name:        mysql.Quote(alias, "Name"),
		CountryCode: mysql.Quote(alias, "CountryCode"),
		District:    mysql.Quote(alias, "District"),
		Population:  mysql.Quote(alias, "Population"),
	}
}

type cityWhere[Q mysql.Filterable] struct {
	ID          mysql.WhereMod[Q, int32]
	Name        mysql.WhereMod[Q, string]
	CountryCode mysql.WhereMod[Q, string]
	District    mysql.WhereMod[Q, string]
	Population  mysql.WhereMod[Q, int32]
}

func (cityWhere[Q]) AliasedAs(alias string) cityWhere[Q] {
	return buildCityWhere[Q](buildCityColumns(alias))
}

func buildCityWhere[Q mysql.Filterable](cols cityColumns) cityWhere[Q] {
	return cityWhere[Q]{
		ID:          mysql.Where[Q, int32](cols.ID),
		Name:        mysql.Where[Q, string](cols.Name),
		CountryCode: mysql.Where[Q, string](cols.CountryCode),
		District:    mysql.Where[Q, string](cols.District),
		Population:  mysql.Where[Q, int32](cols.Population),
	}
}

var CityErrors = &cityErrors{
	ErrUniquePrimary: &UniqueConstraintError{s: "PRIMARY"},
}

type cityErrors struct {
	ErrUniquePrimary *UniqueConstraintError
}

// CitySetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type CitySetter struct {
	ID          omit.Val[int32]  `db:"ID,pk,autoincr" `
	Name        omit.Val[string] `db:"Name" `
	CountryCode omit.Val[string] `db:"CountryCode" `
	District    omit.Val[string] `db:"District" `
	Population  omit.Val[int32]  `db:"Population" `
}

func (s CitySetter) SetColumns() []string {
	vals := make([]string, 0, 5)
	if !s.ID.IsUnset() {
		vals = append(vals, "ID")
	}

	if !s.Name.IsUnset() {
		vals = append(vals, "Name")
	}

	if !s.CountryCode.IsUnset() {
		vals = append(vals, "CountryCode")
	}

	if !s.District.IsUnset() {
		vals = append(vals, "District")
	}

	if !s.Population.IsUnset() {
		vals = append(vals, "Population")
	}

	return vals
}

func (s CitySetter) Overwrite(t *City) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.Name.IsUnset() {
		t.Name, _ = s.Name.Get()
	}
	if !s.CountryCode.IsUnset() {
		t.CountryCode, _ = s.CountryCode.Get()
	}
	if !s.District.IsUnset() {
		t.District, _ = s.District.Get()
	}
	if !s.Population.IsUnset() {
		t.Population, _ = s.Population.Get()
	}
}

func (s *CitySetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Cities.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(
		bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if s.ID.IsUnset() {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(s.ID).WriteSQL(ctx, w, d, start)
		}), bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if s.Name.IsUnset() {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(s.Name).WriteSQL(ctx, w, d, start)
		}), bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if s.CountryCode.IsUnset() {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(s.CountryCode).WriteSQL(ctx, w, d, start)
		}), bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if s.District.IsUnset() {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(s.District).WriteSQL(ctx, w, d, start)
		}), bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if s.Population.IsUnset() {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(s.Population).WriteSQL(ctx, w, d, start)
		}))
}

func (s CitySetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions("city")...)
}

func (s CitySetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 5)

	if !s.ID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "ID")...),
			mysql.Arg(s.ID),
		}})
	}

	if !s.Name.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "Name")...),
			mysql.Arg(s.Name),
		}})
	}

	if !s.CountryCode.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "CountryCode")...),
			mysql.Arg(s.CountryCode),
		}})
	}

	if !s.District.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "District")...),
			mysql.Arg(s.District),
		}})
	}

	if !s.Population.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "Population")...),
			mysql.Arg(s.Population),
		}})
	}

	return exprs
}

// FindCity retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindCity(ctx context.Context, exec bob.Executor, IDPK int32, cols ...string) (*City, error) {
	if len(cols) == 0 {
		return Cities.Query(
			SelectWhere.Cities.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return Cities.Query(
		SelectWhere.Cities.ID.EQ(IDPK),
		sm.Columns(Cities.Columns().Only(cols...)),
	).One(ctx, exec)
}

// CityExists checks the presence of a single record by primary key
func CityExists(ctx context.Context, exec bob.Executor, IDPK int32) (bool, error) {
	return Cities.Query(
		SelectWhere.Cities.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after City is retrieved from the database
func (o *City) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Cities.AfterSelectHooks.RunHooks(ctx, exec, CitySlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Cities.AfterInsertHooks.RunHooks(ctx, exec, CitySlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Cities.AfterUpdateHooks.RunHooks(ctx, exec, CitySlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Cities.AfterDeleteHooks.RunHooks(ctx, exec, CitySlice{o})
	}

	return err
}

// PrimaryKeyVals returns the primary key values of the City
func (o *City) PrimaryKeyVals() bob.Expression {
	return mysql.Arg(o.ID)
}

func (o *City) pkEQ() dialect.Expression {
	return mysql.Quote("city", "ID").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.PrimaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the City
func (o *City) Update(ctx context.Context, exec bob.Executor, s *CitySetter) error {
	_, err := Cities.Update(s.UpdateMod(), um.Where(o.pkEQ())).Exec(ctx, exec)
	if err != nil {
		return err
	}

	s.Overwrite(o)

	return nil
}

// Delete deletes a single City record with an executor
func (o *City) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Cities.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the City using the executor
func (o *City) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Cities.Query(
		SelectWhere.Cities.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after CitySlice is retrieved from the database
func (o CitySlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Cities.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Cities.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Cities.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Cities.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o CitySlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return mysql.Raw("NULL")
	}

	return mysql.Quote("city", "ID").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.PrimaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o CitySlice) copyMatchingRows(from ...*City) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o CitySlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Cities.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *City:
				o.copyMatchingRows(retrieved)
			case []*City:
				o.copyMatchingRows(retrieved...)
			case CitySlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a City or a slice of City
				// then run the AfterUpdateHooks on the slice
				_, err = Cities.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o CitySlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Cities.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *City:
				o.copyMatchingRows(retrieved)
			case []*City:
				o.copyMatchingRows(retrieved...)
			case CitySlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a City or a slice of City
				// then run the AfterDeleteHooks on the slice
				_, err = Cities.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o CitySlice) UpdateAll(ctx context.Context, exec bob.Executor, vals CitySetter) error {
	_, err := Cities.Update(vals.UpdateMod(), o.UpdateMod()).Exec(ctx, exec)

	for i := range o {
		vals.Overwrite(o[i])
	}

	return err
}

func (o CitySlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Cities.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o CitySlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := Cities.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type cityJoins[Q dialect.Joinable] struct {
	typ                string
	CountryCodeCountry func(context.Context) modAs[Q, countryColumns]
}

func (j cityJoins[Q]) aliasedAs(alias string) cityJoins[Q] {
	return buildCityJoins[Q](buildCityColumns(alias), j.typ)
}

func buildCityJoins[Q dialect.Joinable](cols cityColumns, typ string) cityJoins[Q] {
	return cityJoins[Q]{
		typ:                typ,
		CountryCodeCountry: citiesJoinCountryCodeCountry[Q](cols, typ),
	}
}

func citiesJoinCountryCodeCountry[Q dialect.Joinable](from cityColumns, typ string) func(context.Context) modAs[Q, countryColumns] {
	return func(ctx context.Context) modAs[Q, countryColumns] {
		return modAs[Q, countryColumns]{
			c: CountryColumns,
			f: func(to countryColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Countries.Name().As(to.Alias())).On(
						to.Code.EQ(from.CountryCode),
					))
				}

				return mods
			},
		}
	}
}

// CountryCodeCountry starts a query for related objects on country
func (o *City) CountryCodeCountry(mods ...bob.Mod[*dialect.SelectQuery]) CountriesQuery {
	return Countries.Query(append(mods,
		sm.Where(CountryColumns.Code.EQ(mysql.Arg(o.CountryCode))),
	)...)
}

func (os CitySlice) CountryCodeCountry(mods ...bob.Mod[*dialect.SelectQuery]) CountriesQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = mysql.ArgGroup(o.CountryCode)
	}

	return Countries.Query(append(mods,
		sm.Where(mysql.Group(CountryColumns.Code).In(PKArgs...)),
	)...)
}

func (o *City) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "CountryCodeCountry":
		rel, ok := retrieved.(*Country)
		if !ok {
			return fmt.Errorf("city cannot load %T as %q", retrieved, name)
		}

		o.R.CountryCodeCountry = rel

		if rel != nil {
			rel.R.CountryCodeCities = CitySlice{o}
		}
		return nil
	default:
		return fmt.Errorf("city has no relationship %q", name)
	}
}

func PreloadCityCountryCodeCountry(opts ...mysql.PreloadOption) mysql.Preloader {
	return mysql.Preload[*Country, CountrySlice](orm.Relationship{
		Name: "CountryCodeCountry",
		Sides: []orm.RelSide{
			{
				From: TableNames.Cities,
				To:   TableNames.Countries,
				FromColumns: []string{
					ColumnNames.Cities.CountryCode,
				},
				ToColumns: []string{
					ColumnNames.Countries.Code,
				},
			},
		},
	}, Countries.Columns().Names(), opts...)
}

func ThenLoadCityCountryCodeCountry(queryMods ...bob.Mod[*dialect.SelectQuery]) mysql.Loader {
	return mysql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadCityCountryCodeCountry(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load CityCountryCodeCountry", retrieved)
		}

		err := loader.LoadCityCountryCodeCountry(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadCityCountryCodeCountry loads the city's CountryCodeCountry into the .R struct
func (o *City) LoadCityCountryCodeCountry(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.CountryCodeCountry = nil

	related, err := o.CountryCodeCountry(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.CountryCodeCities = CitySlice{o}

	o.R.CountryCodeCountry = related
	return nil
}

// LoadCityCountryCodeCountry loads the city's CountryCodeCountry into the .R struct
func (os CitySlice) LoadCityCountryCodeCountry(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	countries, err := os.CountryCodeCountry(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range countries {
			if o.CountryCode != rel.Code {
				continue
			}

			rel.R.CountryCodeCities = append(rel.R.CountryCodeCities, o)

			o.R.CountryCodeCountry = rel
			break
		}
	}

	return nil
}

func attachCityCountryCodeCountry0(ctx context.Context, exec bob.Executor, count int, city0 *City, country1 *Country) (*City, error) {
	setter := &CitySetter{
		CountryCode: omit.From(country1.Code),
	}

	err := city0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachCityCountryCodeCountry0: %w", err)
	}

	return city0, nil
}

func (city0 *City) InsertCountryCodeCountry(ctx context.Context, exec bob.Executor, related *CountrySetter) error {
	country1, err := Countries.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachCityCountryCodeCountry0(ctx, exec, 1, city0, country1)
	if err != nil {
		return err
	}

	city0.R.CountryCodeCountry = country1

	country1.R.CountryCodeCities = append(country1.R.CountryCodeCities, city0)

	return nil
}

func (city0 *City) AttachCountryCodeCountry(ctx context.Context, exec bob.Executor, country1 *Country) error {
	var err error

	_, err = attachCityCountryCodeCountry0(ctx, exec, 1, city0, country1)
	if err != nil {
		return err
	}

	city0.R.CountryCodeCountry = country1

	country1.R.CountryCodeCities = append(country1.R.CountryCodeCities, city0)

	return nil
}
