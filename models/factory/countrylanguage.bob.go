// Code generated by BobGen mysql v0.34.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"

	"github.com/aarondl/opt/omit"
	models "github.com/ishisaka/golang-bob-plactice/models"
	"github.com/jaswdr/faker/v2"
	"github.com/shopspring/decimal"
	"github.com/stephenafamo/bob"
)

type CountrylanguageMod interface {
	Apply(*CountrylanguageTemplate)
}

type CountrylanguageModFunc func(*CountrylanguageTemplate)

func (f CountrylanguageModFunc) Apply(n *CountrylanguageTemplate) {
	f(n)
}

type CountrylanguageModSlice []CountrylanguageMod

func (mods CountrylanguageModSlice) Apply(n *CountrylanguageTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// CountrylanguageTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type CountrylanguageTemplate struct {
	CountryCode func() string
	Language    func() string
	IsOfficial  func() CountrylanguageIsOfficial
	Percentage  func() decimal.Decimal

	r countrylanguageR
	f *Factory
}

type countrylanguageR struct {
	CountryCodeCountry *countrylanguageRCountryCodeCountryR
}

type countrylanguageRCountryCodeCountryR struct {
	o *CountryTemplate
}

// Apply mods to the CountrylanguageTemplate
func (o *CountrylanguageTemplate) Apply(mods ...CountrylanguageMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.Countrylanguage
// this does nothing with the relationship templates
func (o CountrylanguageTemplate) toModel() *models.Countrylanguage {
	m := &models.Countrylanguage{}

	if o.CountryCode != nil {
		m.CountryCode = o.CountryCode()
	}
	if o.Language != nil {
		m.Language = o.Language()
	}
	if o.IsOfficial != nil {
		m.IsOfficial = o.IsOfficial()
	}
	if o.Percentage != nil {
		m.Percentage = o.Percentage()
	}

	return m
}

// toModels returns an models.CountrylanguageSlice
// this does nothing with the relationship templates
func (o CountrylanguageTemplate) toModels(number int) models.CountrylanguageSlice {
	m := make(models.CountrylanguageSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.Countrylanguage
// according to the relationships in the template. Nothing is inserted into the db
func (t CountrylanguageTemplate) setModelRels(o *models.Countrylanguage) {
	if t.r.CountryCodeCountry != nil {
		rel := t.r.CountryCodeCountry.o.toModel()
		rel.R.CountryCodeCountrylanguages = append(rel.R.CountryCodeCountrylanguages, o)
		o.CountryCode = rel.Code
		o.R.CountryCodeCountry = rel
	}
}

// BuildSetter returns an *models.CountrylanguageSetter
// this does nothing with the relationship templates
func (o CountrylanguageTemplate) BuildSetter() *models.CountrylanguageSetter {
	m := &models.CountrylanguageSetter{}

	if o.CountryCode != nil {
		m.CountryCode = omit.From(o.CountryCode())
	}
	if o.Language != nil {
		m.Language = omit.From(o.Language())
	}
	if o.IsOfficial != nil {
		m.IsOfficial = omit.From(o.IsOfficial())
	}
	if o.Percentage != nil {
		m.Percentage = omit.From(o.Percentage())
	}

	return m
}

// BuildManySetter returns an []*models.CountrylanguageSetter
// this does nothing with the relationship templates
func (o CountrylanguageTemplate) BuildManySetter(number int) []*models.CountrylanguageSetter {
	m := make([]*models.CountrylanguageSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Countrylanguage
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use CountrylanguageTemplate.Create
func (o CountrylanguageTemplate) Build() *models.Countrylanguage {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.CountrylanguageSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use CountrylanguageTemplate.CreateMany
func (o CountrylanguageTemplate) BuildMany(number int) models.CountrylanguageSlice {
	m := make(models.CountrylanguageSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableCountrylanguage(m *models.CountrylanguageSetter) {
	if m.CountryCode.IsUnset() {
		m.CountryCode = omit.From(random_string(nil))
	}
	if m.Language.IsUnset() {
		m.Language = omit.From(random_string(nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.Countrylanguage
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *CountrylanguageTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Countrylanguage) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a countrylanguage and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *CountrylanguageTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Countrylanguage, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a countrylanguage and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *CountrylanguageTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.Countrylanguage {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a countrylanguage and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *CountrylanguageTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.Countrylanguage {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a countrylanguage and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *CountrylanguageTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.Countrylanguage, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableCountrylanguage(opt)

	var rel0 *models.Country
	if o.r.CountryCodeCountry == nil {
		var ok bool
		rel0, ok = countryCtx.Value(ctx)
		if !ok {
			CountrylanguageMods.WithNewCountryCodeCountry().Apply(o)
		}
	}
	if o.r.CountryCodeCountry != nil {
		ctx, rel0, err = o.r.CountryCodeCountry.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}
	opt.CountryCode = omit.From(rel0.Code)

	m, err := models.Countrylanguages.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = countrylanguageCtx.WithValue(ctx, m)

	m.R.CountryCodeCountry = rel0

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple countrylanguages and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o CountrylanguageTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.CountrylanguageSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple countrylanguages and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o CountrylanguageTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.CountrylanguageSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple countrylanguages and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o CountrylanguageTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.CountrylanguageSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple countrylanguages and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o CountrylanguageTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.CountrylanguageSlice, error) {
	var err error
	m := make(models.CountrylanguageSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// Countrylanguage has methods that act as mods for the CountrylanguageTemplate
var CountrylanguageMods countrylanguageMods

type countrylanguageMods struct{}

func (m countrylanguageMods) RandomizeAllColumns(f *faker.Faker) CountrylanguageMod {
	return CountrylanguageModSlice{
		CountrylanguageMods.RandomCountryCode(f),
		CountrylanguageMods.RandomLanguage(f),
		CountrylanguageMods.RandomIsOfficial(f),
		CountrylanguageMods.RandomPercentage(f),
	}
}

// Set the model columns to this value
func (m countrylanguageMods) CountryCode(val string) CountrylanguageMod {
	return CountrylanguageModFunc(func(o *CountrylanguageTemplate) {
		o.CountryCode = func() string { return val }
	})
}

// Set the Column from the function
func (m countrylanguageMods) CountryCodeFunc(f func() string) CountrylanguageMod {
	return CountrylanguageModFunc(func(o *CountrylanguageTemplate) {
		o.CountryCode = f
	})
}

// Clear any values for the column
func (m countrylanguageMods) UnsetCountryCode() CountrylanguageMod {
	return CountrylanguageModFunc(func(o *CountrylanguageTemplate) {
		o.CountryCode = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m countrylanguageMods) RandomCountryCode(f *faker.Faker) CountrylanguageMod {
	return CountrylanguageModFunc(func(o *CountrylanguageTemplate) {
		o.CountryCode = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m countrylanguageMods) Language(val string) CountrylanguageMod {
	return CountrylanguageModFunc(func(o *CountrylanguageTemplate) {
		o.Language = func() string { return val }
	})
}

// Set the Column from the function
func (m countrylanguageMods) LanguageFunc(f func() string) CountrylanguageMod {
	return CountrylanguageModFunc(func(o *CountrylanguageTemplate) {
		o.Language = f
	})
}

// Clear any values for the column
func (m countrylanguageMods) UnsetLanguage() CountrylanguageMod {
	return CountrylanguageModFunc(func(o *CountrylanguageTemplate) {
		o.Language = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m countrylanguageMods) RandomLanguage(f *faker.Faker) CountrylanguageMod {
	return CountrylanguageModFunc(func(o *CountrylanguageTemplate) {
		o.Language = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m countrylanguageMods) IsOfficial(val CountrylanguageIsOfficial) CountrylanguageMod {
	return CountrylanguageModFunc(func(o *CountrylanguageTemplate) {
		o.IsOfficial = func() CountrylanguageIsOfficial { return val }
	})
}

// Set the Column from the function
func (m countrylanguageMods) IsOfficialFunc(f func() CountrylanguageIsOfficial) CountrylanguageMod {
	return CountrylanguageModFunc(func(o *CountrylanguageTemplate) {
		o.IsOfficial = f
	})
}

// Clear any values for the column
func (m countrylanguageMods) UnsetIsOfficial() CountrylanguageMod {
	return CountrylanguageModFunc(func(o *CountrylanguageTemplate) {
		o.IsOfficial = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m countrylanguageMods) RandomIsOfficial(f *faker.Faker) CountrylanguageMod {
	return CountrylanguageModFunc(func(o *CountrylanguageTemplate) {
		o.IsOfficial = func() CountrylanguageIsOfficial {
			return random_CountrylanguageIsOfficial(f)
		}
	})
}

// Set the model columns to this value
func (m countrylanguageMods) Percentage(val decimal.Decimal) CountrylanguageMod {
	return CountrylanguageModFunc(func(o *CountrylanguageTemplate) {
		o.Percentage = func() decimal.Decimal { return val }
	})
}

// Set the Column from the function
func (m countrylanguageMods) PercentageFunc(f func() decimal.Decimal) CountrylanguageMod {
	return CountrylanguageModFunc(func(o *CountrylanguageTemplate) {
		o.Percentage = f
	})
}

// Clear any values for the column
func (m countrylanguageMods) UnsetPercentage() CountrylanguageMod {
	return CountrylanguageModFunc(func(o *CountrylanguageTemplate) {
		o.Percentage = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m countrylanguageMods) RandomPercentage(f *faker.Faker) CountrylanguageMod {
	return CountrylanguageModFunc(func(o *CountrylanguageTemplate) {
		o.Percentage = func() decimal.Decimal {
			return random_decimal_Decimal(f)
		}
	})
}

func (m countrylanguageMods) WithCountryCodeCountry(rel *CountryTemplate) CountrylanguageMod {
	return CountrylanguageModFunc(func(o *CountrylanguageTemplate) {
		o.r.CountryCodeCountry = &countrylanguageRCountryCodeCountryR{
			o: rel,
		}
	})
}

func (m countrylanguageMods) WithNewCountryCodeCountry(mods ...CountryMod) CountrylanguageMod {
	return CountrylanguageModFunc(func(o *CountrylanguageTemplate) {
		related := o.f.NewCountry(mods...)

		m.WithCountryCodeCountry(related).Apply(o)
	})
}

func (m countrylanguageMods) WithoutCountryCodeCountry() CountrylanguageMod {
	return CountrylanguageModFunc(func(o *CountrylanguageTemplate) {
		o.r.CountryCodeCountry = nil
	})
}
