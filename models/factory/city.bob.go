// Code generated by BobGen mysql v0.34.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"

	"github.com/aarondl/opt/omit"
	models "github.com/ishisaka/golang-bob-plactice/models"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
)

type CityMod interface {
	Apply(*CityTemplate)
}

type CityModFunc func(*CityTemplate)

func (f CityModFunc) Apply(n *CityTemplate) {
	f(n)
}

type CityModSlice []CityMod

func (mods CityModSlice) Apply(n *CityTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// CityTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type CityTemplate struct {
	ID          func() int32
	Name        func() string
	CountryCode func() string
	District    func() string
	Population  func() int32

	r cityR
	f *Factory
}

type cityR struct {
	CountryCodeCountry *cityRCountryCodeCountryR
}

type cityRCountryCodeCountryR struct {
	o *CountryTemplate
}

// Apply mods to the CityTemplate
func (o *CityTemplate) Apply(mods ...CityMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.City
// this does nothing with the relationship templates
func (o CityTemplate) toModel() *models.City {
	m := &models.City{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.Name != nil {
		m.Name = o.Name()
	}
	if o.CountryCode != nil {
		m.CountryCode = o.CountryCode()
	}
	if o.District != nil {
		m.District = o.District()
	}
	if o.Population != nil {
		m.Population = o.Population()
	}

	return m
}

// toModels returns an models.CitySlice
// this does nothing with the relationship templates
func (o CityTemplate) toModels(number int) models.CitySlice {
	m := make(models.CitySlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.City
// according to the relationships in the template. Nothing is inserted into the db
func (t CityTemplate) setModelRels(o *models.City) {
	if t.r.CountryCodeCountry != nil {
		rel := t.r.CountryCodeCountry.o.toModel()
		rel.R.CountryCodeCities = append(rel.R.CountryCodeCities, o)
		o.CountryCode = rel.Code
		o.R.CountryCodeCountry = rel
	}
}

// BuildSetter returns an *models.CitySetter
// this does nothing with the relationship templates
func (o CityTemplate) BuildSetter() *models.CitySetter {
	m := &models.CitySetter{}

	if o.ID != nil {
		m.ID = omit.From(o.ID())
	}
	if o.Name != nil {
		m.Name = omit.From(o.Name())
	}
	if o.CountryCode != nil {
		m.CountryCode = omit.From(o.CountryCode())
	}
	if o.District != nil {
		m.District = omit.From(o.District())
	}
	if o.Population != nil {
		m.Population = omit.From(o.Population())
	}

	return m
}

// BuildManySetter returns an []*models.CitySetter
// this does nothing with the relationship templates
func (o CityTemplate) BuildManySetter(number int) []*models.CitySetter {
	m := make([]*models.CitySetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.City
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use CityTemplate.Create
func (o CityTemplate) Build() *models.City {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.CitySlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use CityTemplate.CreateMany
func (o CityTemplate) BuildMany(number int) models.CitySlice {
	m := make(models.CitySlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableCity(m *models.CitySetter) {
	if m.Name.IsUnset() {
		m.Name = omit.From(random_string(nil))
	}
	if m.CountryCode.IsUnset() {
		m.CountryCode = omit.From(random_string(nil))
	}
	if m.District.IsUnset() {
		m.District = omit.From(random_string(nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.City
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *CityTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.City) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a city and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *CityTemplate) Create(ctx context.Context, exec bob.Executor) (*models.City, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a city and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *CityTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.City {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a city and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *CityTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.City {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a city and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *CityTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.City, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableCity(opt)

	var rel0 *models.Country
	if o.r.CountryCodeCountry == nil {
		var ok bool
		rel0, ok = countryCtx.Value(ctx)
		if !ok {
			CityMods.WithNewCountryCodeCountry().Apply(o)
		}
	}
	if o.r.CountryCodeCountry != nil {
		ctx, rel0, err = o.r.CountryCodeCountry.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}
	opt.CountryCode = omit.From(rel0.Code)

	m, err := models.Cities.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = cityCtx.WithValue(ctx, m)

	m.R.CountryCodeCountry = rel0

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple cities and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o CityTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.CitySlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple cities and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o CityTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.CitySlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple cities and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o CityTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.CitySlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple cities and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o CityTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.CitySlice, error) {
	var err error
	m := make(models.CitySlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// City has methods that act as mods for the CityTemplate
var CityMods cityMods

type cityMods struct{}

func (m cityMods) RandomizeAllColumns(f *faker.Faker) CityMod {
	return CityModSlice{
		CityMods.RandomID(f),
		CityMods.RandomName(f),
		CityMods.RandomCountryCode(f),
		CityMods.RandomDistrict(f),
		CityMods.RandomPopulation(f),
	}
}

// Set the model columns to this value
func (m cityMods) ID(val int32) CityMod {
	return CityModFunc(func(o *CityTemplate) {
		o.ID = func() int32 { return val }
	})
}

// Set the Column from the function
func (m cityMods) IDFunc(f func() int32) CityMod {
	return CityModFunc(func(o *CityTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m cityMods) UnsetID() CityMod {
	return CityModFunc(func(o *CityTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m cityMods) RandomID(f *faker.Faker) CityMod {
	return CityModFunc(func(o *CityTemplate) {
		o.ID = func() int32 {
			return random_int32(f)
		}
	})
}

// Set the model columns to this value
func (m cityMods) Name(val string) CityMod {
	return CityModFunc(func(o *CityTemplate) {
		o.Name = func() string { return val }
	})
}

// Set the Column from the function
func (m cityMods) NameFunc(f func() string) CityMod {
	return CityModFunc(func(o *CityTemplate) {
		o.Name = f
	})
}

// Clear any values for the column
func (m cityMods) UnsetName() CityMod {
	return CityModFunc(func(o *CityTemplate) {
		o.Name = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m cityMods) RandomName(f *faker.Faker) CityMod {
	return CityModFunc(func(o *CityTemplate) {
		o.Name = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m cityMods) CountryCode(val string) CityMod {
	return CityModFunc(func(o *CityTemplate) {
		o.CountryCode = func() string { return val }
	})
}

// Set the Column from the function
func (m cityMods) CountryCodeFunc(f func() string) CityMod {
	return CityModFunc(func(o *CityTemplate) {
		o.CountryCode = f
	})
}

// Clear any values for the column
func (m cityMods) UnsetCountryCode() CityMod {
	return CityModFunc(func(o *CityTemplate) {
		o.CountryCode = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m cityMods) RandomCountryCode(f *faker.Faker) CityMod {
	return CityModFunc(func(o *CityTemplate) {
		o.CountryCode = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m cityMods) District(val string) CityMod {
	return CityModFunc(func(o *CityTemplate) {
		o.District = func() string { return val }
	})
}

// Set the Column from the function
func (m cityMods) DistrictFunc(f func() string) CityMod {
	return CityModFunc(func(o *CityTemplate) {
		o.District = f
	})
}

// Clear any values for the column
func (m cityMods) UnsetDistrict() CityMod {
	return CityModFunc(func(o *CityTemplate) {
		o.District = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m cityMods) RandomDistrict(f *faker.Faker) CityMod {
	return CityModFunc(func(o *CityTemplate) {
		o.District = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m cityMods) Population(val int32) CityMod {
	return CityModFunc(func(o *CityTemplate) {
		o.Population = func() int32 { return val }
	})
}

// Set the Column from the function
func (m cityMods) PopulationFunc(f func() int32) CityMod {
	return CityModFunc(func(o *CityTemplate) {
		o.Population = f
	})
}

// Clear any values for the column
func (m cityMods) UnsetPopulation() CityMod {
	return CityModFunc(func(o *CityTemplate) {
		o.Population = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m cityMods) RandomPopulation(f *faker.Faker) CityMod {
	return CityModFunc(func(o *CityTemplate) {
		o.Population = func() int32 {
			return random_int32(f)
		}
	})
}

func (m cityMods) WithCountryCodeCountry(rel *CountryTemplate) CityMod {
	return CityModFunc(func(o *CityTemplate) {
		o.r.CountryCodeCountry = &cityRCountryCodeCountryR{
			o: rel,
		}
	})
}

func (m cityMods) WithNewCountryCodeCountry(mods ...CountryMod) CityMod {
	return CityModFunc(func(o *CityTemplate) {
		related := o.f.NewCountry(mods...)

		m.WithCountryCodeCountry(related).Apply(o)
	})
}

func (m cityMods) WithoutCountryCodeCountry() CityMod {
	return CityModFunc(func(o *CityTemplate) {
		o.r.CountryCodeCountry = nil
	})
}
