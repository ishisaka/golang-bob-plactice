// Code generated by BobGen mysql v0.34.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	models "github.com/ishisaka/golang-bob-plactice/models"
	"github.com/jaswdr/faker/v2"
	"github.com/shopspring/decimal"
	"github.com/stephenafamo/bob"
)

type CountryMod interface {
	Apply(*CountryTemplate)
}

type CountryModFunc func(*CountryTemplate)

func (f CountryModFunc) Apply(n *CountryTemplate) {
	f(n)
}

type CountryModSlice []CountryMod

func (mods CountryModSlice) Apply(n *CountryTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// CountryTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type CountryTemplate struct {
	Code           func() string
	Name           func() string
	Continent      func() CountryContinent
	Region         func() string
	SurfaceArea    func() decimal.Decimal
	IndepYear      func() null.Val[int16]
	Population     func() int32
	LifeExpectancy func() null.Val[decimal.Decimal]
	GNP            func() null.Val[decimal.Decimal]
	GNPOLD         func() null.Val[decimal.Decimal]
	LocalName      func() string
	GovernmentForm func() string
	HeadOfState    func() null.Val[string]
	Capital        func() null.Val[int32]
	Code2          func() string

	r countryR
	f *Factory
}

type countryR struct {
	CountryCodeCities           []*countryRCountryCodeCitiesR
	CountryCodeCountrylanguages []*countryRCountryCodeCountrylanguagesR
}

type countryRCountryCodeCitiesR struct {
	number int
	o      *CityTemplate
}
type countryRCountryCodeCountrylanguagesR struct {
	number int
	o      *CountrylanguageTemplate
}

// Apply mods to the CountryTemplate
func (o *CountryTemplate) Apply(mods ...CountryMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.Country
// this does nothing with the relationship templates
func (o CountryTemplate) toModel() *models.Country {
	m := &models.Country{}

	if o.Code != nil {
		m.Code = o.Code()
	}
	if o.Name != nil {
		m.Name = o.Name()
	}
	if o.Continent != nil {
		m.Continent = o.Continent()
	}
	if o.Region != nil {
		m.Region = o.Region()
	}
	if o.SurfaceArea != nil {
		m.SurfaceArea = o.SurfaceArea()
	}
	if o.IndepYear != nil {
		m.IndepYear = o.IndepYear()
	}
	if o.Population != nil {
		m.Population = o.Population()
	}
	if o.LifeExpectancy != nil {
		m.LifeExpectancy = o.LifeExpectancy()
	}
	if o.GNP != nil {
		m.GNP = o.GNP()
	}
	if o.GNPOLD != nil {
		m.GNPOLD = o.GNPOLD()
	}
	if o.LocalName != nil {
		m.LocalName = o.LocalName()
	}
	if o.GovernmentForm != nil {
		m.GovernmentForm = o.GovernmentForm()
	}
	if o.HeadOfState != nil {
		m.HeadOfState = o.HeadOfState()
	}
	if o.Capital != nil {
		m.Capital = o.Capital()
	}
	if o.Code2 != nil {
		m.Code2 = o.Code2()
	}

	return m
}

// toModels returns an models.CountrySlice
// this does nothing with the relationship templates
func (o CountryTemplate) toModels(number int) models.CountrySlice {
	m := make(models.CountrySlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.Country
// according to the relationships in the template. Nothing is inserted into the db
func (t CountryTemplate) setModelRels(o *models.Country) {
	if t.r.CountryCodeCities != nil {
		rel := models.CitySlice{}
		for _, r := range t.r.CountryCodeCities {
			related := r.o.toModels(r.number)
			for _, rel := range related {
				rel.CountryCode = o.Code
				rel.R.CountryCodeCountry = o
			}
			rel = append(rel, related...)
		}
		o.R.CountryCodeCities = rel
	}

	if t.r.CountryCodeCountrylanguages != nil {
		rel := models.CountrylanguageSlice{}
		for _, r := range t.r.CountryCodeCountrylanguages {
			related := r.o.toModels(r.number)
			for _, rel := range related {
				rel.CountryCode = o.Code
				rel.R.CountryCodeCountry = o
			}
			rel = append(rel, related...)
		}
		o.R.CountryCodeCountrylanguages = rel
	}
}

// BuildSetter returns an *models.CountrySetter
// this does nothing with the relationship templates
func (o CountryTemplate) BuildSetter() *models.CountrySetter {
	m := &models.CountrySetter{}

	if o.Code != nil {
		m.Code = omit.From(o.Code())
	}
	if o.Name != nil {
		m.Name = omit.From(o.Name())
	}
	if o.Continent != nil {
		m.Continent = omit.From(o.Continent())
	}
	if o.Region != nil {
		m.Region = omit.From(o.Region())
	}
	if o.SurfaceArea != nil {
		m.SurfaceArea = omit.From(o.SurfaceArea())
	}
	if o.IndepYear != nil {
		m.IndepYear = omitnull.FromNull(o.IndepYear())
	}
	if o.Population != nil {
		m.Population = omit.From(o.Population())
	}
	if o.LifeExpectancy != nil {
		m.LifeExpectancy = omitnull.FromNull(o.LifeExpectancy())
	}
	if o.GNP != nil {
		m.GNP = omitnull.FromNull(o.GNP())
	}
	if o.GNPOLD != nil {
		m.GNPOLD = omitnull.FromNull(o.GNPOLD())
	}
	if o.LocalName != nil {
		m.LocalName = omit.From(o.LocalName())
	}
	if o.GovernmentForm != nil {
		m.GovernmentForm = omit.From(o.GovernmentForm())
	}
	if o.HeadOfState != nil {
		m.HeadOfState = omitnull.FromNull(o.HeadOfState())
	}
	if o.Capital != nil {
		m.Capital = omitnull.FromNull(o.Capital())
	}
	if o.Code2 != nil {
		m.Code2 = omit.From(o.Code2())
	}

	return m
}

// BuildManySetter returns an []*models.CountrySetter
// this does nothing with the relationship templates
func (o CountryTemplate) BuildManySetter(number int) []*models.CountrySetter {
	m := make([]*models.CountrySetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Country
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use CountryTemplate.Create
func (o CountryTemplate) Build() *models.Country {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.CountrySlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use CountryTemplate.CreateMany
func (o CountryTemplate) BuildMany(number int) models.CountrySlice {
	m := make(models.CountrySlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableCountry(m *models.CountrySetter) {
	if m.Code.IsUnset() {
		m.Code = omit.From(random_string(nil))
	}
	if m.Name.IsUnset() {
		m.Name = omit.From(random_string(nil))
	}
	if m.Region.IsUnset() {
		m.Region = omit.From(random_string(nil))
	}
	if m.LocalName.IsUnset() {
		m.LocalName = omit.From(random_string(nil))
	}
	if m.GovernmentForm.IsUnset() {
		m.GovernmentForm = omit.From(random_string(nil))
	}
	if m.Code2.IsUnset() {
		m.Code2 = omit.From(random_string(nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.Country
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *CountryTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Country) (context.Context, error) {
	var err error

	if o.r.CountryCodeCities != nil {
		for _, r := range o.r.CountryCodeCities {
			var rel0 models.CitySlice
			ctx, rel0, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachCountryCodeCities(ctx, exec, rel0...)
			if err != nil {
				return ctx, err
			}
		}
	}

	if o.r.CountryCodeCountrylanguages != nil {
		for _, r := range o.r.CountryCodeCountrylanguages {
			var rel1 models.CountrylanguageSlice
			ctx, rel1, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachCountryCodeCountrylanguages(ctx, exec, rel1...)
			if err != nil {
				return ctx, err
			}
		}
	}

	return ctx, err
}

// Create builds a country and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *CountryTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Country, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a country and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *CountryTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.Country {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a country and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *CountryTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.Country {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a country and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *CountryTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.Country, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableCountry(opt)

	m, err := models.Countries.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = countryCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple countries and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o CountryTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.CountrySlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple countries and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o CountryTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.CountrySlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple countries and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o CountryTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.CountrySlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple countries and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o CountryTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.CountrySlice, error) {
	var err error
	m := make(models.CountrySlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// Country has methods that act as mods for the CountryTemplate
var CountryMods countryMods

type countryMods struct{}

func (m countryMods) RandomizeAllColumns(f *faker.Faker) CountryMod {
	return CountryModSlice{
		CountryMods.RandomCode(f),
		CountryMods.RandomName(f),
		CountryMods.RandomContinent(f),
		CountryMods.RandomRegion(f),
		CountryMods.RandomSurfaceArea(f),
		CountryMods.RandomIndepYear(f),
		CountryMods.RandomPopulation(f),
		CountryMods.RandomLifeExpectancy(f),
		CountryMods.RandomGNP(f),
		CountryMods.RandomGNPOLD(f),
		CountryMods.RandomLocalName(f),
		CountryMods.RandomGovernmentForm(f),
		CountryMods.RandomHeadOfState(f),
		CountryMods.RandomCapital(f),
		CountryMods.RandomCode2(f),
	}
}

// Set the model columns to this value
func (m countryMods) Code(val string) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.Code = func() string { return val }
	})
}

// Set the Column from the function
func (m countryMods) CodeFunc(f func() string) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.Code = f
	})
}

// Clear any values for the column
func (m countryMods) UnsetCode() CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.Code = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m countryMods) RandomCode(f *faker.Faker) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.Code = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m countryMods) Name(val string) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.Name = func() string { return val }
	})
}

// Set the Column from the function
func (m countryMods) NameFunc(f func() string) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.Name = f
	})
}

// Clear any values for the column
func (m countryMods) UnsetName() CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.Name = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m countryMods) RandomName(f *faker.Faker) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.Name = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m countryMods) Continent(val CountryContinent) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.Continent = func() CountryContinent { return val }
	})
}

// Set the Column from the function
func (m countryMods) ContinentFunc(f func() CountryContinent) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.Continent = f
	})
}

// Clear any values for the column
func (m countryMods) UnsetContinent() CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.Continent = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m countryMods) RandomContinent(f *faker.Faker) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.Continent = func() CountryContinent {
			return random_CountryContinent(f)
		}
	})
}

// Set the model columns to this value
func (m countryMods) Region(val string) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.Region = func() string { return val }
	})
}

// Set the Column from the function
func (m countryMods) RegionFunc(f func() string) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.Region = f
	})
}

// Clear any values for the column
func (m countryMods) UnsetRegion() CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.Region = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m countryMods) RandomRegion(f *faker.Faker) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.Region = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m countryMods) SurfaceArea(val decimal.Decimal) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.SurfaceArea = func() decimal.Decimal { return val }
	})
}

// Set the Column from the function
func (m countryMods) SurfaceAreaFunc(f func() decimal.Decimal) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.SurfaceArea = f
	})
}

// Clear any values for the column
func (m countryMods) UnsetSurfaceArea() CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.SurfaceArea = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m countryMods) RandomSurfaceArea(f *faker.Faker) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.SurfaceArea = func() decimal.Decimal {
			return random_decimal_Decimal(f)
		}
	})
}

// Set the model columns to this value
func (m countryMods) IndepYear(val null.Val[int16]) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.IndepYear = func() null.Val[int16] { return val }
	})
}

// Set the Column from the function
func (m countryMods) IndepYearFunc(f func() null.Val[int16]) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.IndepYear = f
	})
}

// Clear any values for the column
func (m countryMods) UnsetIndepYear() CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.IndepYear = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m countryMods) RandomIndepYear(f *faker.Faker) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.IndepYear = func() null.Val[int16] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[int16](nil)
			}

			return null.From(random_int16(f))
		}
	})
}

// Set the model columns to this value
func (m countryMods) Population(val int32) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.Population = func() int32 { return val }
	})
}

// Set the Column from the function
func (m countryMods) PopulationFunc(f func() int32) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.Population = f
	})
}

// Clear any values for the column
func (m countryMods) UnsetPopulation() CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.Population = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m countryMods) RandomPopulation(f *faker.Faker) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.Population = func() int32 {
			return random_int32(f)
		}
	})
}

// Set the model columns to this value
func (m countryMods) LifeExpectancy(val null.Val[decimal.Decimal]) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.LifeExpectancy = func() null.Val[decimal.Decimal] { return val }
	})
}

// Set the Column from the function
func (m countryMods) LifeExpectancyFunc(f func() null.Val[decimal.Decimal]) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.LifeExpectancy = f
	})
}

// Clear any values for the column
func (m countryMods) UnsetLifeExpectancy() CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.LifeExpectancy = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m countryMods) RandomLifeExpectancy(f *faker.Faker) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.LifeExpectancy = func() null.Val[decimal.Decimal] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[decimal.Decimal](nil)
			}

			return null.From(random_decimal_Decimal(f))
		}
	})
}

// Set the model columns to this value
func (m countryMods) GNP(val null.Val[decimal.Decimal]) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.GNP = func() null.Val[decimal.Decimal] { return val }
	})
}

// Set the Column from the function
func (m countryMods) GNPFunc(f func() null.Val[decimal.Decimal]) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.GNP = f
	})
}

// Clear any values for the column
func (m countryMods) UnsetGNP() CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.GNP = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m countryMods) RandomGNP(f *faker.Faker) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.GNP = func() null.Val[decimal.Decimal] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[decimal.Decimal](nil)
			}

			return null.From(random_decimal_Decimal(f))
		}
	})
}

// Set the model columns to this value
func (m countryMods) GNPOLD(val null.Val[decimal.Decimal]) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.GNPOLD = func() null.Val[decimal.Decimal] { return val }
	})
}

// Set the Column from the function
func (m countryMods) GNPOLDFunc(f func() null.Val[decimal.Decimal]) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.GNPOLD = f
	})
}

// Clear any values for the column
func (m countryMods) UnsetGNPOLD() CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.GNPOLD = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m countryMods) RandomGNPOLD(f *faker.Faker) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.GNPOLD = func() null.Val[decimal.Decimal] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[decimal.Decimal](nil)
			}

			return null.From(random_decimal_Decimal(f))
		}
	})
}

// Set the model columns to this value
func (m countryMods) LocalName(val string) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.LocalName = func() string { return val }
	})
}

// Set the Column from the function
func (m countryMods) LocalNameFunc(f func() string) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.LocalName = f
	})
}

// Clear any values for the column
func (m countryMods) UnsetLocalName() CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.LocalName = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m countryMods) RandomLocalName(f *faker.Faker) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.LocalName = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m countryMods) GovernmentForm(val string) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.GovernmentForm = func() string { return val }
	})
}

// Set the Column from the function
func (m countryMods) GovernmentFormFunc(f func() string) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.GovernmentForm = f
	})
}

// Clear any values for the column
func (m countryMods) UnsetGovernmentForm() CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.GovernmentForm = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m countryMods) RandomGovernmentForm(f *faker.Faker) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.GovernmentForm = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m countryMods) HeadOfState(val null.Val[string]) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.HeadOfState = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m countryMods) HeadOfStateFunc(f func() null.Val[string]) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.HeadOfState = f
	})
}

// Clear any values for the column
func (m countryMods) UnsetHeadOfState() CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.HeadOfState = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m countryMods) RandomHeadOfState(f *faker.Faker) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.HeadOfState = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[string](nil)
			}

			return null.From(random_string(f))
		}
	})
}

// Set the model columns to this value
func (m countryMods) Capital(val null.Val[int32]) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.Capital = func() null.Val[int32] { return val }
	})
}

// Set the Column from the function
func (m countryMods) CapitalFunc(f func() null.Val[int32]) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.Capital = f
	})
}

// Clear any values for the column
func (m countryMods) UnsetCapital() CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.Capital = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m countryMods) RandomCapital(f *faker.Faker) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.Capital = func() null.Val[int32] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[int32](nil)
			}

			return null.From(random_int32(f))
		}
	})
}

// Set the model columns to this value
func (m countryMods) Code2(val string) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.Code2 = func() string { return val }
	})
}

// Set the Column from the function
func (m countryMods) Code2Func(f func() string) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.Code2 = f
	})
}

// Clear any values for the column
func (m countryMods) UnsetCode2() CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.Code2 = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m countryMods) RandomCode2(f *faker.Faker) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.Code2 = func() string {
			return random_string(f)
		}
	})
}

func (m countryMods) WithCountryCodeCities(number int, related *CityTemplate) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.r.CountryCodeCities = []*countryRCountryCodeCitiesR{{
			number: number,
			o:      related,
		}}
	})
}

func (m countryMods) WithNewCountryCodeCities(number int, mods ...CityMod) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		related := o.f.NewCity(mods...)
		m.WithCountryCodeCities(number, related).Apply(o)
	})
}

func (m countryMods) AddCountryCodeCities(number int, related *CityTemplate) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.r.CountryCodeCities = append(o.r.CountryCodeCities, &countryRCountryCodeCitiesR{
			number: number,
			o:      related,
		})
	})
}

func (m countryMods) AddNewCountryCodeCities(number int, mods ...CityMod) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		related := o.f.NewCity(mods...)
		m.AddCountryCodeCities(number, related).Apply(o)
	})
}

func (m countryMods) WithoutCountryCodeCities() CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.r.CountryCodeCities = nil
	})
}

func (m countryMods) WithCountryCodeCountrylanguages(number int, related *CountrylanguageTemplate) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.r.CountryCodeCountrylanguages = []*countryRCountryCodeCountrylanguagesR{{
			number: number,
			o:      related,
		}}
	})
}

func (m countryMods) WithNewCountryCodeCountrylanguages(number int, mods ...CountrylanguageMod) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		related := o.f.NewCountrylanguage(mods...)
		m.WithCountryCodeCountrylanguages(number, related).Apply(o)
	})
}

func (m countryMods) AddCountryCodeCountrylanguages(number int, related *CountrylanguageTemplate) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.r.CountryCodeCountrylanguages = append(o.r.CountryCodeCountrylanguages, &countryRCountryCodeCountrylanguagesR{
			number: number,
			o:      related,
		})
	})
}

func (m countryMods) AddNewCountryCodeCountrylanguages(number int, mods ...CountrylanguageMod) CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		related := o.f.NewCountrylanguage(mods...)
		m.AddCountryCodeCountrylanguages(number, related).Apply(o)
	})
}

func (m countryMods) WithoutCountryCodeCountrylanguages() CountryMod {
	return CountryModFunc(func(o *CountryTemplate) {
		o.r.CountryCodeCountrylanguages = nil
	})
}
